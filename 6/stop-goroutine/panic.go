package stop_goroutine

import "fmt"

//Использование panic:
//Это плохая практика, но при наличии паники, выполнение текущей горутины завершается.

//go func() {
//	defer func() {
//		if r := recover(); r != nil {
//														    // Код
//		}
//	}()
//															// Код
//	if условие {
//		panic("Произошла паника")
//	}
//}()

func Panic() {
	go func() {
		defer func() {
			if r := recover(); r != nil {
				fmt.Println("Восстановлено от паники:", r)
			}
		}()

		// Некоторый код
		fmt.Println("Горутина начала выполнение")

		// Имитация паники
		if true {
			panic("Произошла паника")
		}

		fmt.Println("Этот код не будет выполнен из-за паники")
	}()

	// Даем время горутине выполниться
	// В реальном приложении, возможно, потребуется лучше управлять завершением
	// и дождаться завершения горутины, но в этом примере мы просто ждем секунду
	fmt.Println("Ожидание выполнения горутины...")
	// Подождем 1 секунду, чтобы горутина имела возможность выполниться
	// (в реальном приложении, нам понадобится лучший механизм ожидания)
	fmt.Println("Завершение программы")
}
